
GitHub repo: commit code : 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
Docker file explanation:
=========================

1) FROM --> First one is FROM to pull the base imaeg, Allmost all the Dockerfile starts with FROM instruction. It tells you that 
what is the base image do you require to start with your Dockerfile 

2) RUN --> To execute commands, if you have some shell commands like installing packages, Creating users, etc almost 
all the shell commands we can execute with the RUN command instruction on Dockerfile.

3) CMD  --> To provides defaults for an executing container, CMD instruction get executed at the time of docker execution 

4) ENTRYPOINT  -->  Its also similar to CMD get executed at the time of container execution , However CMD can be commands
can be overwritten but ENTRYPOINT commands are not overwritten. And CMD can be work like aguments for ENTTRYPOINT .

5) WORKDIR --> It is something like CMD command if we wish to switch our directory within the container Then we could
use workdir instruction.

6) COPY --> Copy a directory from your local(docker-host) machine to the docker container.

7) ADD --> Copy a files and folders  from your local machine (docker-host) to docker container. We can also use this 
command like wget command. 

8) EXPOSE --> Informs docker that the container listens on the specified network-porta at runtime . 

ENV --> To set the environment variables .




Create your First Dockerfile :
==============================

pull centos from dockerhub-----------------------------> FROM 
install java ------------------------------------------> RUN 
Create /opt/tomcat directory --------------------------> RUN
Change work directory /opt/tomcat----------------------> WORKDIR
Download tomcat packages-------------------------------> ADD or RUN
Extract tar.gz file------------------------------------> RUN 
Rename the tomcat directory ---------------------------> RUN 	
Tell to docket that it runs on Port 8080 --------------> EXPOSE 
Start the tomcat service ------------------------------> CMD



My First Dockerfile:
====================
FROM centos

RUN cd /etc/yum.repos.d/
RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

RUN yum -y install java
RUN mkdir /opt/tomcat
WORKDIR /opt/tomcat
ADD  https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.78/bin/apache-tomcat-9.0.78.tar.gz .
RUN tar -zxvf apache-tomcat-9.0.78.tar.gz
RUN mv apache-tomcat-9.0.78/* /opt/tomcat 
EXPOSE 8080
CMD ["/opt/tomcat/bin/catalina.sh", "run"]

---------------------------------------------------------------------------

FROM tomcat:latest
RUN cp -r /usr/local/tomcat/webapps.dist/*  /usr/local/tomcat/webapps 
--------------------------------------------------------------------------------


Integrare Docker with Jenkins:
==============================

1) Create dockeradmin user 
2) Install publish over ssh plugin
3) Add Docker host to jenkins "configure systems"

docker exec in GUI:
===================
cd /opt/docker;
docker build -t regappv1 . ;
docker stop registerapp;
docker rm registerapp;
docker run -d --name registerapp -p 8086:8080 regappv1  


Prepare Ansible Server:
======================
1) Setup Hostname
2) Create ansadmin user
3) Add user to sudoers file
4) Generate SSH keys 


Integrate Dockerhost with Ansible:
===============================

On DockerHost:
--------------
1) Create ansadmin user
2) Add ansadmin to sudoers file
3) Enable passwd passwd based login

On AnsibleHost:
---------------

1) Add to ansible host file
2) Copy ssh keys
3) Test the connection 


Integrate Ansible with Jenkins:
================================

Manage-jenkins --> 




Using Ansible to create containers:
===================================
After we push the artifact from jenkins to Ansible host (manually we did till now)

Now how can we make it to our target environment (docker) , That is where dockerhub comes into the picture

SO From ansible host we should push our docker images to docker hub , dockerhub can be accessible by any host 

From ou Ansible we instruct our docker host ok go ahead pull the image from dockerhub and create a container 

Our end user can be accessible from dockerhost .


Now in Ansible host we are going to create a Ansible-playbook which creates a docker image 

Below /opt/docker folder in Ansible server we have creted the regapp.yaml
====================================================
---
 - hosts: ansible
   tasks:  
     - name: Create docker image 
       command: docker build -t regapp:latest . 
       args:
         chdir: /opt/docker
======================================================

So with the help of this ansible yaml file we can create docker image once docker image has been create we need to rename 
the docker image with docker io username credentisls like the below 

Rename the image name:
======================
docker tag 1f24 vsknalli/regapp:latest

Before we push the image to DockerHub we need to login to docker hub vsknalli@gmail.com

# docker push regapp:latest

Now we pushed the image to dockerhub , the next step how we can incorporate this Ansible playbook how we can tag and commit 
the image to DockerHub and from DockerHub the docker host is going to pull this image and create the container out of it .


Using Ansible to create Containers:
===================================

In Ansible server below /opt/docker Here we have our anisble-playbook named regapp.yaml and Dockerfile and app artifactory

in this regapp-yaml ansible play-book we need to modify some tasks one is for taging and push the image to dockerHub


====================================================
---
 - hosts: ansible
   tasks:
     - name: Create docker image
       command: docker build -t regapp:latest .
       args:
         chdir: /opt/docker

======================================================







  















